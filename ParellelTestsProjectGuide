Step-by-Step Guide:
1. Create a New Project in Visual Studio
Open Visual Studio and create a new NUnit Test Project.
File → New → Project → NUnit Test Project (.NET Core)
2. Install Required NuGet Packages
Open the NuGet Package Manager (Tools -> NuGet Package Manager -> Manage NuGet Packages for Solution) and install:
Selenium.WebDriver
NUnit
ExtentReports
3. Project Structure
Create the following folder structure:

markdown
Copy code
- SeleniumParallelTests
  - Reports
  - Tests
  - Utilities
4. Add Code Files
Create three main classes/files:

ExtentReportManager.cs (Utilities) - This manages the ExtentReports instance:

csharp
Copy code
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;

namespace SeleniumParallelTests.Utilities
{
    public class ExtentReportManager
    {
        private static ExtentReports extent;
        private static ExtentHtmlReporter htmlReporter;

        public static ExtentReports GetExtentReports()
        {
            if (extent == null)
            {
                htmlReporter = new ExtentHtmlReporter("Reports/extentReport.html");
                extent = new ExtentReports();
                extent.AttachReporter(htmlReporter);
            }
            return extent;
        }
    }
}
ParallelTestWithReporting.cs (Tests) - This handles parallel tests with reporting:

csharp
Copy code
using AventStack.ExtentReports;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using SeleniumParallelTests.Utilities;
using System;

namespace SeleniumParallelTests.Tests
{
    [TestFixture]
    [Parallelizable(ParallelScope.All)] // Parallel test execution
    public class ParallelTestWithReporting
    {
        IWebDriver driver;
        ExtentReports extent;
        [ThreadStatic]
        ExtentTest test;

        [SetUp]
        public void SetUp()
        {
            driver = new ChromeDriver();
            extent = ExtentReportManager.GetExtentReports();
            test = extent.CreateTest(TestContext.CurrentContext.Test.Name);
        }

        [Test]
        public void Test1()
        {
            test.Log(Status.Info, "Navigating to Example.com");
            driver.Navigate().GoToUrl("https://example.com");

            Assert.IsTrue(driver.Title.Contains("Example"));
            test.Log(Status.Pass, "Title contains 'Example'");
        }

        [Test]
        public void Test2()
        {
            test.Log(Status.Info, "Navigating to Another Example.com");
            driver.Navigate().GoToUrl("https://another-example.com");

            Assert.IsTrue(driver.Title.Contains("Another"));
            test.Log(Status.Pass, "Title contains 'Another'");
        }

        [TearDown]
        public void TearDown()
        {
            driver.Quit();
            extent.Flush();
        }
    }
}
WebDriverManager.cs (Utilities) - Handles WebDriver creation for thread-safe execution (optional, you could add this for better WebDriver management):

csharp
Copy code
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;

namespace SeleniumParallelTests.Utilities
{
    public class WebDriverManager
    {
        [ThreadStatic]
        private static IWebDriver driver;

        public static IWebDriver GetWebDriver()
        {
            if (driver == null)
            {
                driver = new ChromeDriver();
            }
            return driver;
        }
    }
}
5. Generate Extent Report
After tests are executed, the report will be generated under the Reports/extentReport.html path. You can open this file in any browser to view test results.
